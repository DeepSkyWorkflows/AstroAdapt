@using System.Runtime.Serialization

@if (Solutions != null)
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-1">
                Action
            </div>
            <div class="col-1">
                <strong>Weight</strong>
            </div>
            <div class="col-1">
                <strong>Deviance</strong>
            </div>
            <div class="col-1">
                <strong>Length (mm)</strong>
            </div>
            <div class="col-1">
                <strong># Components</strong>
            </div>
            <div class="col-7">
                <strong>Solution</strong>
            </div>
        </div>
        @if (objectToView == null)
        {
            if  (Solutions.Count < 1)
            {
                <div class="alert alert-danger">
                    <span class="oi oi-ban"></span> No solution could be found based on your parameters.
                </div>
            }
            
            @foreach (var solution in Solutions!)
            {
                <div class="row detail">
                    <div class="col-1">
                        <span class="clickable oi oi-cloud-upload"></span>
                        <span>&nbsp;</span>
                        @if (GetObjectId(solution) == objectToDeleteId)
                        {
                            <span class="clickable oi oi-circle-check" @onclick="@(() => ConfirmDelete(true))" title="Confirm delete"></span>
                            <span>&nbsp;</span>
                            <span class="clickable oi oi-circle-x" @onclick="@(() => ConfirmDelete(false))" title="Cancel delete"></span>
                        }
                        else
                        {
                            <span class="clickable oi oi-x" @onclick="@(() => Delete(solution))" title="Delete"></span>
                        }
                    </div>
                    <div class="col-1 clickable" title="Click for detailed view" @onclick="@(() => objectToView = solution)">
                        @solution.Weight
                    </div>
                    <div class="col-1 clickable" title="Click for detailed view" @onclick="@(() => objectToView = solution)">
                        @solution.Deviance (@FormatPct(solution.DeviancePct))%
                    </div>
                    <div class="col-1 clickable" title="Click for detailed view" @onclick="@(() => objectToView = solution)">
                        @solution.LengthMm mm
                    </div>
                    <div class="col-1 clickable" title="Click for detailed view" @onclick="@(() => objectToView = solution)">
                        @solution.ComponentCount
                    </div>
                    <div class="col-7 clickable" title="Click for detailed view" @onclick="@(() => objectToView = solution)">
                        @foreach (var component in @solution.Connections.Skip(1).SkipLast(1))
                        {
                            @component.ShortCode <span>&nbsp;</span>
                        }
                    </div>
                </div>
            }
        }
        else
        {
            <div class="row">
                <div class="col-12">
                    <h3>
                        <span class="clickable oi oi-action-undo" @onclick="@(() => objectToView = null)"></span>
                        @objectToView.ToShortString()
                    </h3>
                    <button class="btn btn-primary btn-sm">
                        <span class="oi oi-cloud-upload"></span> Save solution
                    </button>
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    @foreach (var component in objectToView.Connections)
                    {
                        <ComponentCard Component="@component" Selectable="@false"/>
                    }
                </div>
            </div>            
        }
    </div>
}


@code {
    private ObjectIDGenerator objectIdGenerator = new();

    private long GetObjectId(object obj) => objectIdGenerator.GetId(obj, out bool _);

    private string FormatPct(double pct) => (pct * 100).ToString("0.00");

    private long? objectToDeleteId;
    private Solution? objectToDelete;
    private Solution? objectToView;

    private void Delete(Solution solution)
    {
        objectToDelete = solution;
        objectToDeleteId = GetObjectId(solution);
    }

    private void ConfirmDelete(bool confirm)
    {
        objectToDeleteId = null;
        if (confirm && Solutions != null && objectToDelete != null)
        {
            Solutions.Remove(objectToDelete);
        }
        objectToDelete = null;
    }

    [Parameter]
    public IList<Solution>? Solutions { get; set; }
}