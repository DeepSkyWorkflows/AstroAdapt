@using System.Runtime.Serialization

@if (Solutions != null)
{
    <div class="container-fluid filters">
        <div class="row">
            <div class="stat">
                <div class="label">Tolerance</div>
                <div class="value">
                    <input type="checkbox" @bind-value="@perfectOnly"/>
                    Perfect only
                </div>
            </div>
            <div class="stat">
                <div class="label">Must have type</div>
                <div class="value green">
                    <select @bind-value="@MustHaveType" @bind-value:event="oninput">
                        @foreach(var type in componentTypes)
                        {
                            <option value="@type">@type</option>
                        }
                    </select>
                </div>
            </div>
            <div class="stat">
                <div class="label">Must have component</div>
                <div class="value green">
                    <select>

                    </select>
                </div>
            </div>
            <div class="stat">
                <div class="label">Must not have type</div>
                <div class="value red">
                    <select>

                    </select>
                </div>
            </div>
            <div class="stat">
                <div class="label">Must not have component</div>
                <div class="value red">
                    <select>

                    </select>
                </div>
            </div>
            <div class="stat">
                <div class="label">Sort by <button class="btn btn-link" @onclick="@(() => ascending = !ascending)">@ascendingText</button></div>
                <div class="value">
                    <select @bind-value="@sortBy" @bind-value:event="oninput">
                        @foreach(var field in fields)
                        {
                                <option value="@field">@field</option>
                        }
                    </select>
                </div>
            </div>
            <div class="stat">
                <div class="label">Start Over</div>
                <div class="value red">
                    <p></p>
                    <button class="btn btn-warning">
                        <span class="oi oi-reload"></span>
                        Start Over
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="grid container-fluid">
        <div class="row">
            <div class="col-1">
                Action
            </div>
            <div class="col-1">
                <strong>Weight</strong>
            </div>
            <div class="col-2">
                <strong>Deviance</strong>
            </div>
            <div class="col-2">
                <strong>Length (mm)</strong>
            </div>
            <div class="col-1">
                <strong>Count</strong>
            </div>
            <div class="col-5">
                <strong>Solution</strong>
            </div>
        </div>
        @if (objectToView == null)
        {
            if  (Solutions.Count < 1)
            {
                <div class="alert alert-danger">
                    <span class="oi oi-ban"></span> No solution could be found based on your parameters.
                </div>
            }
            
            @foreach (var solution in solutions)
            {
                <div class="row detail">
                    <div class="col-1">
                        <span class="clickable oi oi-cloud-upload"></span>
                        <span>&nbsp;</span>
                        @if (GetObjectId(solution) == objectToDeleteId)
                        {
                            <span class="clickable oi oi-circle-check" @onclick="@(() => ConfirmDelete(true))" title="Confirm delete"></span>
                            <span>&nbsp;</span>
                            <span class="clickable oi oi-circle-x" @onclick="@(() => ConfirmDelete(false))" title="Cancel delete"></span>
                        }
                        else
                        {
                            <span class="clickable oi oi-x" @onclick="@(() => Delete(solution))" title="Delete"></span>
                        }
                    </div>
                    <div class="col-1 clickable" title="Click for detailed view" @onclick="@(() => objectToView = solution)">
                        @solution.Weight
                    </div>
                    <div class="col-2 clickable" title="Click for detailed view" @onclick="@(() => objectToView = solution)">
                        @solution.Deviance (@FormatPct(solution.DeviancePct))%
                    </div>
                    <div class="col-2 clickable" title="Click for detailed view" @onclick="@(() => objectToView = solution)">
                        @solution.LengthMm mm
                    </div>
                    <div class="col-1 clickable" title="Click for detailed view" @onclick="@(() => objectToView = solution)">
                        @solution.ComponentCount
                    </div>
                    <div class="col-5 clickable" title="Click for detailed view" @onclick="@(() => objectToView = solution)">
                        @foreach (var component in @solution.Connections.Skip(1).SkipLast(1))
                        {
                            @component.ShortCode <span>&nbsp;</span>
                        }
                    </div>
                </div>
            }
        }
        else
        {
            <div class="row">
                <div class="col-12">
                    <h3>
                        <span class="clickable oi oi-action-undo" @onclick="@(() => objectToView = null)"></span>
                        @objectToView.ToShortString()
                    </h3>
                    <button class="btn btn-primary btn-sm">
                        <span class="oi oi-cloud-upload"></span> Save solution
                    </button>
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    @foreach (var component in objectToView.Connections)
                    {
                        <ComponentCard Component="@component" Selectable="@false"/>
                    }
                </div>
            </div>            
        }
    </div>
}


@code {
    private const string ANY = "(any)";    

    private ObjectIDGenerator objectIdGenerator = new();

    private long GetObjectId(object obj) => objectIdGenerator.GetId(obj, out bool _);

    private string FormatPct(double pct) => (pct * 100).ToString("0.00");

    private long? objectToDeleteId;
    private Solution? objectToDelete;
    private Solution? objectToView;
    private bool perfectOnly;
    private ComponentTypes? mustHaveType;
    private ComponentTypes? mustNotHaveType;
    private Guid? mustHaveComponent;
    private Guid? mustNotHaveComponent;
    private string sortBy = nameof(Solution.Weight);
    private bool ascending = false;
    private string ascendingText => ascending ? "Ascending" : "Descending";

    private readonly string[] fields = new []
    {
        nameof(Solution.Weight),
        nameof(Solution.Deviance),
        nameof(Solution.LengthMm),
        nameof(Solution.ComponentCount),
    };

    private string MustHaveType
    {
        get => mustHaveType == null ? ANY : mustHaveType.ToString()!;
        set => mustHaveType = value == ANY
            ? null
            : Enum.Parse<ComponentTypes>(value!);
    }    

    private IEnumerable<string> componentTypes =>
        Solutions == null ? new[] { ANY } :
        new[] { ANY }.Union(Enum.GetNames<ComponentTypes>().OrderBy(n => n));

    private IEnumerable<(string id, string desc)> components =>
        Solutions == null ? new[] { (id: ANY, desc: ANY) } :
        new[] { (id: ANY, desc: ANY) }.Union(Solutions.SelectMany(s => s.Connections)
            .Where(c =>
                c.TargetDirectionConnectionType != ConnectionTypes.Terminator
                && c.SensorDirectionConnectionType != ConnectionTypes.Terminator)
            .Select(c => (id: c.Id.ToString(), desc: "{c.Manufacturer!.Name} {c.Model}"))
            .Distinct()
            .OrderBy(c => c.desc));

    private void Delete(Solution solution)
    {
        objectToDelete = solution;
        objectToDeleteId = GetObjectId(solution);
    }

    private void ConfirmDelete(bool confirm)
    {
        objectToDeleteId = null;
        if (confirm && Solutions != null && objectToDelete != null)
        {
            Solutions.Remove(objectToDelete);
        }
        objectToDelete = null;
    }

    [Parameter]
    public IList<Solution>? Solutions { get; set; }

    private IQueryable<Solution> solutions
    {
        get
        {
            if (Solutions == null)
            {
                return Array.Empty<Solution>().AsQueryable();
            }

            var query = Solutions.AsQueryable();
            if (perfectOnly)
            {
                query = query.Where(s => s.Deviance == 0);
            }

            if (mustHaveType != null)
            {
                query = query
                .Where(s =>
                    s.Connections.Any(
                        c =>
                        c.ComponentType == mustHaveType));
            }

            switch (sortBy)
            {
                case nameof(Solution.Weight):
                    query = ascending
                    ? query.OrderBy(s => s.Weight)
                    : query.OrderByDescending(s => s.Weight);
                    break;

                case nameof(Solution.Deviance):
                    query = ascending
                    ? query.OrderBy(s => s.Deviance)
                    : query.OrderByDescending(s => s.Deviance);
                    break;

                case nameof(Solution.LengthMm):
                    query = ascending
                    ? query.OrderBy(s => s.LengthMm)
                    : query.OrderByDescending(s => s.LengthMm);
                    break;

                default:
                    query = ascending
                    ? query.OrderBy(s => s.ComponentCount)
                    : query.OrderByDescending(s => s.ComponentCount);
                    break;
            }

            return query;
        }
    }        
}